package com.kenvix.utils.preprocessor;

import com.kenvix.utils.Environment;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

public abstract class BasePreprocessor extends AbstractProcessor {
    protected Types typeUtil;
    protected Elements elementUtil;
    protected Filer filer;
    protected Messager messager;
    protected ProcessingEnvironment processingEnv;

    private static Map<Class, Map<String, List<MethodSpec.Builder>>> globalMethodBuffer = new HashMap<>();

    {
        if(!globalMethodBuffer.containsKey(this.getClass()))
            globalMethodBuffer.put(this.getClass(), new HashMap<>());
    }

    protected String getFileHeader() {
        return "This file is generated by " +
                this.getClass().getSimpleName() +
                "\nDo NOT modify this file!\n-------------------------------------\nCopyright (c) 2019 Kenvix <i@kenvix.com>. All rights reserved.";
    }

    protected Map<String, List<MethodSpec.Builder>> getMethodBuffer() {
        return globalMethodBuffer.get(this.getClass());
    }

    protected final List<MethodSpec.Builder> getMethodBuilder(String methodName) {
        return getMethodBuilder(methodName, null);
    }

    protected final List<MethodSpec.Builder> getMethodBuilder(String methodName, Element clazz) {
        Map<String, List<MethodSpec.Builder>> methodBuffer = getMethodBuffer();

        if(methodBuffer.containsKey(methodName))
            return methodBuffer.get(methodName);

        synchronized (this) {
            if(methodBuffer.containsKey(methodName))
                return methodBuffer.get(methodName);

            final List<MethodSpec.Builder> methodSpec;

            if(clazz == null)
                methodSpec = createMethodBuilder(methodName);
            else
                methodSpec = createMethodBuilder(methodName, clazz);

            if(methodSpec == null)
                throw new IllegalArgumentException("Generate method code failed: create method for tag [" + methodName + "] is not implemented");

            methodBuffer.put(methodName, methodSpec);
            return methodSpec;
        }
    }

    protected List<MethodSpec.Builder> createMethodBuilder(String methodName) { return null; }
    protected List<MethodSpec.Builder> createMethodBuilder(String methodName, Element clazz) { return null; }

    protected abstract boolean onProcess(Map<Element, List<Element>> filteredAnnotations, Set<? extends TypeElement> originalAnnotations, RoundEnvironment roundEnv);
    protected abstract Class[] getSupportedAnnotations();
    protected abstract boolean onProcessingOver(Map<Element, List<Element>> filteredAnnotations, Set<? extends TypeElement> originalAnnotations, RoundEnvironment roundEnv);

    @Override
    public synchronized final void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.processingEnv = processingEnv;
        typeUtil = processingEnv.getTypeUtils();
        elementUtil = processingEnv.getElementUtils();
        filer = processingEnv.getFiler();
        messager = processingEnv.getMessager();
        onPreprocessorInit();

        messager.printMessage(Diagnostic.Kind.NOTE, "Preprocessor: " + this.getClass().getSimpleName() + " Initialized");
    }

    protected void onPreprocessorInit() {}

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        Set<? extends Element> rootElements = roundEnv.getRootElements();
        Map<Element, List<Element>> tasks = new HashMap<>();
        Class[] supportedAnnotations = getSupportedAnnotations();

        for (Element classElement : rootElements) {
            if(classElement.toString().startsWith(Environment.TargetAppPackage)) {
                List<? extends Element> enclosedElements = classElement.getEnclosedElements();

                for(Element enclosedElement : enclosedElements) {
                    List<? extends AnnotationMirror> annotationMirrors = enclosedElement.getAnnotationMirrors();

                    for (AnnotationMirror annotationMirror : annotationMirrors) {

                        for(Class supportedAnnotation : supportedAnnotations) {
                            if(supportedAnnotation.getName().equals(annotationMirror.getAnnotationType().toString())) {
                                if(!tasks.containsKey(classElement))
                                    tasks.put(classElement, new LinkedList<>());

                                tasks.get(classElement).add(enclosedElement);
                            }
                        }
                    }
                }
            }
        }

        return onProcess(tasks, annotations, roundEnv) && (!roundEnv.processingOver() || onProcessingOver(tasks, annotations, roundEnv));
    }

    @Override
    public final Set<String> getSupportedAnnotationTypes() {
        return new LinkedHashSet<String>() {{
            Arrays.stream(getSupportedAnnotations()).forEach(annotationClass -> add(annotationClass.getCanonicalName()));
        }};
    }

    protected ClassName getTargetClassName(Element clazz) {
        String fullName = clazz.toString();
        return ClassName.get(fullName.substring(0, fullName.indexOf(clazz.getSimpleName().toString())-1), clazz.getSimpleName().toString());
    }

    protected final JavaFile.Builder getOutputJavaFileBuilder(TypeSpec className) {
        return JavaFile.builder(Environment.TargetAppPackage + ".generated", className)
                .addFileComment(getFileHeader());
    }

    /**
     *
     * fuck idea error prompt bug
     * @param javaFile
     */
    protected final void saveOutputJavaFile(JavaFile javaFile) throws IOException {
        javaFile.writeTo(filer);
    }
}
