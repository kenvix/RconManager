package com.kenvix.utils.preprocessor;

import com.squareup.javapoet.MethodSpec;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

public abstract class BasePreprocessor extends AbstractProcessor {
    protected Types typeUtil;
    protected Elements elementUtil;
    protected Filer filer;
    protected Messager messager;
    protected ProcessingEnvironment processingEnv;

    private static Map<Class, Map<String, List<MethodSpec.Builder>>> globalMethodBuffer = new HashMap<>();

    {
        if(!globalMethodBuffer.containsKey(this.getClass()))
            globalMethodBuffer.put(this.getClass(), new HashMap<>());
    }

    protected String getFileHeader() {
        return "This file is generated by " +
                this.getClass().getSimpleName() +
                "\nDo NOT modify this file!\n-------------------------------------\nCopyright (c) 2019 Kenvix <i@kenvix.com>. All rights reserved.";
    }

    protected Map<String, List<MethodSpec.Builder>> getMethodBuffer() {
        return globalMethodBuffer.get(this.getClass());
    }

    protected final List<MethodSpec.Builder> getMethodBuilder(String methodName) {
        Map<String, List<MethodSpec.Builder>> methodBuffer = getMethodBuffer();

        if(methodBuffer.containsKey(methodName))
            return methodBuffer.get(methodName);

        synchronized (this) {
            if(methodBuffer.containsKey(methodName))
                return methodBuffer.get(methodName);

            List<MethodSpec.Builder> methodSpec = createMethodBuilder(methodName);

            if(methodSpec == null)
                throw new IllegalArgumentException("Generate method code failed: create method for tag [" + methodName + "] is not implemented");

            methodBuffer.put(methodName, methodSpec);
            return methodSpec;
        }
    }

    protected List<MethodSpec.Builder> createMethodBuilder(String methodName) { return null; }

    @Override
    public synchronized final void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.processingEnv = processingEnv;
        typeUtil = processingEnv.getTypeUtils();
        elementUtil = processingEnv.getElementUtils();
        filer = processingEnv.getFiler();
        messager = processingEnv.getMessager();
        onPreprocessorInit();

        messager.printMessage(Diagnostic.Kind.NOTE, "Preprocessor: " + this.getClass().getSimpleName() + " Initialized");
    }

    protected void onPreprocessorInit() {}

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
}
